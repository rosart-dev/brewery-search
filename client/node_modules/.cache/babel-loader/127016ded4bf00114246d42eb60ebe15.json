{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\erosa\\\\Desktop\\\\Projects\\\\React\\\\brewery-search\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\erosa\\\\Desktop\\\\Projects\\\\React\\\\brewery-search\\\\client\\\\src\\\\context\\\\brewery\\\\BreweryState.js\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport BreweryContext from \"./breweryContext\";\nimport BreweryReducer from \"./breweryReducer\";\nimport { SEARCH_BREWERIES, GET_BREWERY, SET_LOADING, CLEAR_BREWERIES, GET_LOCATION } from \"../types\";\n\nconst BreweryState = props => {\n  const initialState = {\n    breweries: [],\n    brewery: {},\n    location: [],\n    loading: false\n  };\n\n  const _useReducer = useReducer(BreweryReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const buildSearchURL = (text, city, state) => {\n    let url = \"https://api.openbrewerydb.org/breweries?by_name=\".concat(text);\n\n    if (city.length > 0) {\n      url += \"&by_city=\".concat(city);\n    }\n\n    if (state.length > 0) {\n      url += \"&by_state=\".concat(state);\n    }\n\n    return url;\n  };\n\n  const searchBreweries = async (text, city = \"\", state = \"\") => {\n    setLoading();\n    const url = buildSearchURL(text, city, state);\n    const res = await axios.get(url);\n    dispatch({\n      type: SEARCH_BREWERIES,\n      payload: res.data\n    });\n  };\n\n  const getUserLocation = async (lat, long) => {\n    setLoading();\n    const res = await axios.get(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\".concat(lat, \",\").concat(long, \"&key=AIzaSyDszS9vH_VpB6mumst6qwxOXfOAIqpcXpg\")); //Maybe instead of dispatch - I can parse the data\n    //here and pass city and state to searchBreweries function\n\n    dispatch({\n      type: GET_LOCATION,\n      payload: res.data.results\n    });\n  };\n\n  const getBrewery = async id => {\n    setLoading();\n    const res = await axios.get(\"https://api.openbrewerydb.org/breweries/\".concat(id));\n    dispatch({\n      type: GET_BREWERY,\n      payload: res.data\n    });\n  };\n\n  const clearBreweries = () => {\n    dispatch({\n      type: CLEAR_BREWERIES\n    });\n  };\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return React.createElement(BreweryContext.Provider, {\n    value: {\n      breweries: state.breweries,\n      brewery: state.brewery,\n      loading: state.loading,\n      location: state.location,\n      searchBreweries,\n      getUserLocation,\n      getBrewery,\n      clearBreweries\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default BreweryState;","map":{"version":3,"sources":["C:\\Users\\erosa\\Desktop\\Projects\\React\\brewery-search\\client\\src\\context\\brewery\\BreweryState.js"],"names":["React","useReducer","axios","BreweryContext","BreweryReducer","SEARCH_BREWERIES","GET_BREWERY","SET_LOADING","CLEAR_BREWERIES","GET_LOCATION","BreweryState","props","initialState","breweries","brewery","location","loading","state","dispatch","buildSearchURL","text","city","url","length","searchBreweries","setLoading","res","get","type","payload","data","getUserLocation","lat","long","results","getBrewery","id","clearBreweries","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SACEC,gBADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,eAJF,EAKEC,YALF,QAMO,UANP;;AAQA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,SAAS,EAAE,EADQ;AAEnBC,IAAAA,OAAO,EAAE,EAFU;AAGnBC,IAAAA,QAAQ,EAAE,EAHS;AAInBC,IAAAA,OAAO,EAAE;AAJU,GAArB;;AAD4B,sBAQFf,UAAU,CAACG,cAAD,EAAiBQ,YAAjB,CARR;AAAA;AAAA,QAQrBK,KARqB;AAAA,QAQdC,QARc;;AAU5B,QAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaJ,KAAb,KAAuB;AAC5C,QAAIK,GAAG,6DAAsDF,IAAtD,CAAP;;AACA,QAAIC,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnBD,MAAAA,GAAG,uBAAgBD,IAAhB,CAAH;AACD;;AACD,QAAIJ,KAAK,CAACM,MAAN,GAAe,CAAnB,EAAsB;AACpBD,MAAAA,GAAG,wBAAiBL,KAAjB,CAAH;AACD;;AACD,WAAOK,GAAP;AACD,GATD;;AAWA,QAAME,eAAe,GAAG,OAAOJ,IAAP,EAAaC,IAAI,GAAG,EAApB,EAAwBJ,KAAK,GAAG,EAAhC,KAAuC;AAC7DQ,IAAAA,UAAU;AACV,UAAMH,GAAG,GAAGH,cAAc,CAACC,IAAD,EAAOC,IAAP,EAAaJ,KAAb,CAA1B;AACA,UAAMS,GAAG,GAAG,MAAMxB,KAAK,CAACyB,GAAN,CAAUL,GAAV,CAAlB;AACAJ,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEvB,gBADC;AAEPwB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GARD;;AAUA,QAAMC,eAAe,GAAG,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AAC3CR,IAAAA,UAAU;AACV,UAAMC,GAAG,GAAG,MAAMxB,KAAK,CAACyB,GAAN,oEAC4CK,GAD5C,cACmDC,IADnD,kDAAlB,CAF2C,CAM3C;AACA;;AACAf,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEnB,YADC;AAEPoB,MAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASI;AAFX,KAAD,CAAR;AAID,GAZD;;AAcA,QAAMC,UAAU,GAAG,MAAMC,EAAN,IAAY;AAC7BX,IAAAA,UAAU;AACV,UAAMC,GAAG,GAAG,MAAMxB,KAAK,CAACyB,GAAN,mDAC2BS,EAD3B,EAAlB;AAGAlB,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEtB,WADC;AAEPuB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GATD;;AAWA,QAAMO,cAAc,GAAG,MAAM;AAC3BnB,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAEpB;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMiB,UAAU,GAAG,MAAMP,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAErB;AAAR,GAAD,CAAjC;;AAEA,SACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLM,MAAAA,SAAS,EAAEI,KAAK,CAACJ,SADZ;AAELC,MAAAA,OAAO,EAAEG,KAAK,CAACH,OAFV;AAGLE,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAHV;AAILD,MAAAA,QAAQ,EAAEE,KAAK,CAACF,QAJX;AAKLS,MAAAA,eALK;AAMLO,MAAAA,eANK;AAOLI,MAAAA,UAPK;AAQLE,MAAAA;AARK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYG1B,KAAK,CAAC2B,QAZT,CADF;AAgBD,CA9ED;;AAgFA,eAAe5B,YAAf","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport BreweryContext from \"./breweryContext\";\r\nimport BreweryReducer from \"./breweryReducer\";\r\nimport {\r\n  SEARCH_BREWERIES,\r\n  GET_BREWERY,\r\n  SET_LOADING,\r\n  CLEAR_BREWERIES,\r\n  GET_LOCATION\r\n} from \"../types\";\r\n\r\nconst BreweryState = props => {\r\n  const initialState = {\r\n    breweries: [],\r\n    brewery: {},\r\n    location: [],\r\n    loading: false\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(BreweryReducer, initialState);\r\n\r\n  const buildSearchURL = (text, city, state) => {\r\n    let url = `https://api.openbrewerydb.org/breweries?by_name=${text}`;\r\n    if (city.length > 0) {\r\n      url += `&by_city=${city}`;\r\n    }\r\n    if (state.length > 0) {\r\n      url += `&by_state=${state}`;\r\n    }\r\n    return url;\r\n  };\r\n\r\n  const searchBreweries = async (text, city = \"\", state = \"\") => {\r\n    setLoading();\r\n    const url = buildSearchURL(text, city, state);\r\n    const res = await axios.get(url);\r\n    dispatch({\r\n      type: SEARCH_BREWERIES,\r\n      payload: res.data\r\n    });\r\n  };\r\n\r\n  const getUserLocation = async (lat, long) => {\r\n    setLoading();\r\n    const res = await axios.get(\r\n      `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&key=AIzaSyDszS9vH_VpB6mumst6qwxOXfOAIqpcXpg`\r\n    );\r\n\r\n    //Maybe instead of dispatch - I can parse the data\r\n    //here and pass city and state to searchBreweries function\r\n    dispatch({\r\n      type: GET_LOCATION,\r\n      payload: res.data.results\r\n    });\r\n  };\r\n\r\n  const getBrewery = async id => {\r\n    setLoading();\r\n    const res = await axios.get(\r\n      `https://api.openbrewerydb.org/breweries/${id}`\r\n    );\r\n    dispatch({\r\n      type: GET_BREWERY,\r\n      payload: res.data\r\n    });\r\n  };\r\n\r\n  const clearBreweries = () => {\r\n    dispatch({ type: CLEAR_BREWERIES });\r\n  };\r\n\r\n  const setLoading = () => dispatch({ type: SET_LOADING });\r\n\r\n  return (\r\n    <BreweryContext.Provider\r\n      value={{\r\n        breweries: state.breweries,\r\n        brewery: state.brewery,\r\n        loading: state.loading,\r\n        location: state.location,\r\n        searchBreweries,\r\n        getUserLocation,\r\n        getBrewery,\r\n        clearBreweries\r\n      }}\r\n    >\r\n      {props.children}\r\n    </BreweryContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BreweryState;\r\n"]},"metadata":{},"sourceType":"module"}