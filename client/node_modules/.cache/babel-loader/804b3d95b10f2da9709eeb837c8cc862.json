{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\erosa\\\\Desktop\\\\Projects\\\\React\\\\brewery-search\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\erosa\\\\Desktop\\\\Projects\\\\React\\\\brewery-search\\\\client\\\\src\\\\context\\\\brewery\\\\BreweryState.js\";\nimport React, { useReducer, useContext } from \"react\";\nimport axios from \"axios\";\nimport BreweryContext from \"./breweryContext\";\nimport BreweryReducer from \"./breweryReducer\";\nimport AlertContext from \"../../context/alert/alertContext\";\nimport { SEARCH_BREWERIES, AUTO_COMPLETE, GET_BREWERY, SET_LOADING, CLEAR_BREWERIES, CLEAR_SUGGESTIONS } from \"../types\";\nimport BreweryURLBuilder from \"../../utils/BreweryURLBuilder\";\n\nconst BreweryState = props => {\n  const initialState = {\n    breweries: [],\n    suggestions: [],\n    brewery: {},\n    loading: false\n  };\n\n  const _useReducer = useReducer(BreweryReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const alertContext = useContext(AlertContext);\n\n  const searchBreweries = async url => {\n    setLoading();\n    const res = await axios.get(url);\n\n    if (res.data.length === 0) {\n      alertContext.setAlert(\"Sorry, we could not find breweries for what you're looking for. Please try another search term.\", \"warning\");\n    }\n\n    dispatch({\n      type: SEARCH_BREWERIES,\n      payload: res.data\n    });\n  };\n\n  const searchAutoComplete = async query => {\n    const res = await axios.get(\"https://api.openbrewerydb.org/breweries/autocomplete?query=\".concat(query));\n    dispatch({\n      type: AUTO_COMPLETE,\n      payload: res.data\n    });\n  };\n\n  const clearAutoCompleteSuggestions = () => {\n    dispatch({\n      type: CLEAR_SUGGESTIONS\n    });\n  };\n\n  const getUserLocation = async (lat, long) => {\n    setLoading();\n    const res = await axios.get(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\".concat(lat, \",\").concat(long, \"&key=AIzaSyDszS9vH_VpB6mumst6qwxOXfOAIqpcXpg\"));\n    let city = res.data.results[0].address_components[3].long_name.toLowerCase().replace(\"the \", \"\");\n    let state = res.data.results[0].address_components[5].long_name.toLowerCase().replace(\" \", \"_\");\n    const url = new BreweryURLBuilder().setCity(city).setState(state);\n    searchBreweries(url.getUrl());\n  };\n\n  const getBrewery = async id => {\n    setLoading();\n    const res = await axios.get(\"https://api.openbrewerydb.org/breweries/\".concat(id));\n    dispatch({\n      type: GET_BREWERY,\n      payload: res.data\n    });\n  };\n\n  const clearBreweries = () => {\n    dispatch({\n      type: CLEAR_BREWERIES\n    });\n  };\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return React.createElement(BreweryContext.Provider, {\n    value: {\n      breweries: state.breweries,\n      brewery: state.brewery,\n      loading: state.loading,\n      suggestions: state.suggestions,\n      searchBreweries,\n      searchAutoComplete,\n      getUserLocation,\n      getBrewery,\n      clearBreweries\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default BreweryState;","map":{"version":3,"sources":["C:\\Users\\erosa\\Desktop\\Projects\\React\\brewery-search\\client\\src\\context\\brewery\\BreweryState.js"],"names":["React","useReducer","useContext","axios","BreweryContext","BreweryReducer","AlertContext","SEARCH_BREWERIES","AUTO_COMPLETE","GET_BREWERY","SET_LOADING","CLEAR_BREWERIES","CLEAR_SUGGESTIONS","BreweryURLBuilder","BreweryState","props","initialState","breweries","suggestions","brewery","loading","state","dispatch","alertContext","searchBreweries","url","setLoading","res","get","data","length","setAlert","type","payload","searchAutoComplete","query","clearAutoCompleteSuggestions","getUserLocation","lat","long","city","results","address_components","long_name","toLowerCase","replace","setCity","setState","getUrl","getBrewery","id","clearBreweries","children"],"mappings":"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","sourcesContent":["import React, { useReducer, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport BreweryContext from \"./breweryContext\";\r\nimport BreweryReducer from \"./breweryReducer\";\r\nimport AlertContext from \"../../context/alert/alertContext\";\r\nimport {\r\n  SEARCH_BREWERIES,\r\n  AUTO_COMPLETE,\r\n  GET_BREWERY,\r\n  SET_LOADING,\r\n  CLEAR_BREWERIES,\r\n  CLEAR_SUGGESTIONS\r\n} from \"../types\";\r\n\r\nimport BreweryURLBuilder from \"../../utils/BreweryURLBuilder\";\r\n\r\nconst BreweryState = props => {\r\n  const initialState = {\r\n    breweries: [],\r\n    suggestions: [],\r\n    brewery: {},\r\n    loading: false\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(BreweryReducer, initialState);\r\n\r\n  const alertContext = useContext(AlertContext);\r\n\r\n  const searchBreweries = async url => {\r\n    setLoading();\r\n    const res = await axios.get(url);\r\n    if (res.data.length === 0) {\r\n      alertContext.setAlert(\r\n        \"Sorry, we could not find breweries for what you're looking for. Please try another search term.\",\r\n        \"warning\"\r\n      );\r\n    }\r\n    dispatch({\r\n      type: SEARCH_BREWERIES,\r\n      payload: res.data\r\n    });\r\n  };\r\n\r\n  const searchAutoComplete = async query => {\r\n    const res = await axios.get(\r\n      `https://api.openbrewerydb.org/breweries/autocomplete?query=${query}`\r\n    );\r\n\r\n    dispatch({\r\n      type: AUTO_COMPLETE,\r\n      payload: res.data\r\n    });\r\n  };\r\n\r\n  const clearAutoCompleteSuggestions = () => {\r\n    dispatch({\r\n      type: CLEAR_SUGGESTIONS\r\n    });\r\n  };\r\n\r\n  const getUserLocation = async (lat, long) => {\r\n    setLoading();\r\n    const res = await axios.get(\r\n      `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&key=AIzaSyDszS9vH_VpB6mumst6qwxOXfOAIqpcXpg`\r\n    );\r\n\r\n    let city = res.data.results[0].address_components[3].long_name\r\n      .toLowerCase()\r\n      .replace(\"the \", \"\");\r\n    let state = res.data.results[0].address_components[5].long_name\r\n      .toLowerCase()\r\n      .replace(\" \", \"_\");\r\n\r\n    const url = new BreweryURLBuilder().setCity(city).setState(state);\r\n\r\n    searchBreweries(url.getUrl());\r\n  };\r\n\r\n  const getBrewery = async id => {\r\n    setLoading();\r\n    const res = await axios.get(\r\n      `https://api.openbrewerydb.org/breweries/${id}`\r\n    );\r\n    dispatch({\r\n      type: GET_BREWERY,\r\n      payload: res.data\r\n    });\r\n  };\r\n\r\n  const clearBreweries = () => {\r\n    dispatch({ type: CLEAR_BREWERIES });\r\n  };\r\n\r\n  const setLoading = () => dispatch({ type: SET_LOADING });\r\n\r\n  return (\r\n    <BreweryContext.Provider\r\n      value={{\r\n        breweries: state.breweries,\r\n        brewery: state.brewery,\r\n        loading: state.loading,\r\n        suggestions: state.suggestions,\r\n        searchBreweries,\r\n        searchAutoComplete,\r\n        getUserLocation,\r\n        getBrewery,\r\n        clearBreweries\r\n      }}\r\n    >\r\n      {props.children}\r\n    </BreweryContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BreweryState;\r\n"]},"metadata":{},"sourceType":"module"}